// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  website       String?
  description   String?
  ahaId         String?
  dineoutId     String?
  image         String?
  menuUrl       String?
  accounts      Account[]
  sessions      Session[]
  offers        Offer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Offer {
  id           String       @id @default(cuid())
  title        String
  description  String
  price        Int
  image        String?
  active       Boolean
  dateFrom     DateTime?
  dateTo       DateTime?
  typeOfOffer  TypeOfOffer
  whichWeekDay DayOffer?
  whichMonth   MonthOffer?
  user         User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
}

enum TypeOfOffer {
  DAYOFFER
  MONTHOFFER
  PERIOD
}

enum DayOffer {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum MonthOffer {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}
